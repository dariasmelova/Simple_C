// a program that demonstrates the bitwise AND, bitwise inclusive OR, bitwise exclusive OR and bitwise complement operators

#include <stdio.h>

void displayBits(unsigned int value); // prototype

int main(void)
{
    unsigned int number1;
    unsigned int number2;
    unsigned int mask;
    unsigned int setBits;

    // demonstrate bitwise AND (&)
    number1 = 65535;
    mask = 1;
    puts("The result of combining the following");
    displayBits(number1);
    displayBits(mask);
    puts("using the bitwise AND operator & is");
    displayBits(number1 & mask);

    // demonstrate bitwise inclusive OR (|)
    number1 = 15;
    setBits = 241;
    puts("\nThe result of combining the following");
    displayBits(number1);
    displayBits(setBits);
    puts("using the bitwise inclusive OR operator | is");
    displayBits(number1 | setBits);

    // demonstrate bitwise exclusive OR (^)
    number1 = 139;
    number2 = 199;
    puts("\nThe result of combining the following");
    displayBits(number1);
    displayBits(number2);
    puts("using the bitwise exclusive OR operator ^ is");
    displayBits(number1 ^ number2);

    // demonstrate bitwise complement (~)
    number1 = 21845;
    puts("\nThe one's complement of");
    displayBits(number1);
    puts("is");
    displayBits(~number1);
} // end main

// display bits of an unsigned int value
void displayBits(unsigned int value)
{
    unsigned int c; // counter

    // declare displayMask and left shift 31 bits
    unsigned int displayMask = 1 << 31;

    printf("%10u = ", value);

    // loop through bits
    for (c = 1; c <= 32; ++c) {
        putchar(value & displayMask ? '1' : '0');
        value <<= 1; // shift value left by 1

        if (c % 8 == 0) { // output a space after 8 bits
            putchar(' ');
        } // end if
    } // end for

    putchar('\n');
} // end function displayBits
