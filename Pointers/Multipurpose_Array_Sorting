// a program that sorts an array in ascending or descending order using function pointers

#include <stdio.h>
#define SIZE 10

void bubble(int work[], size_t size, int(*compare)(int a, int b));
int ascending(int a, int b);
int descending(int a, int b);

int main(void)
{
	int order; // 1 for ascending order or 2 for descending order
	size_t counter; 

	int a[SIZE] = { 2, 6, 4, 8, 10, 12, 89, 68, 45, 37 };

	printf("%s", "Enter 1 to sort in ascending order,\n"
		"Enter 2 to sort in descending order: ");
	scanf_s("%d", &order);

	puts("\nData items in original order");

	for (counter = 0; counter < SIZE; ++counter) {
		printf("%5d", a[counter]);
	} 

	// pass function ascending as an argument 
	if (order == 1) {
		bubble(a, SIZE, ascending);
		puts("\nData items in ascending order");
	}  
	else { // pass function descending as an argument 
		bubble(a, SIZE, descending);
		puts("\nData items in descending order");
	} 

	for (counter = 0; counter < SIZE; ++counter) {
		printf("%5d", a[counter]);
	} 

	puts("\n");
} 

//parameter "compare" is a pointer to the comparison function that determines sorting order
void bubble(int work[], size_t size, int(*compare)(int a, int b))
{
	unsigned int pass; 
	size_t count; 

	void swap(int* element1Ptr, int* element2ptr); 

	for (pass = 1; pass < size; ++pass) {

		for (count = 0; count < size - 1; ++count) {

			// if adjacent elements are out of order, swap them
			if ((*compare)(work[count], work[count + 1])) {
				swap(&work[count], &work[count + 1]);
			} 
		} 
	} 
} 

// swap values at memory locations 
void swap(int* element1Ptr, int* element2Ptr)
{
	int hold; 

	hold = *element1Ptr;
	*element1Ptr = *element2Ptr;
	*element2Ptr = hold;
} 
                                           
int ascending(int a, int b)
{
	return b < a; // should swap if b is less than a         
}                                
                                           
int descending(int a, int b)
{
	return b > a; // should swap if b is greater than a      
} 
